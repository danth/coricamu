{ pkgsLib, config, ... }:

with pkgsLib;
with types;

{
  options = {
    baseUrl = mkOption {
      description = ''
        URL of the root of your website.

        All links will be relative to this URL, <emphasis>not</emphasis> the
        the page they are found on.
        Linking to <literal>index.html</literal> from a subdirectory of your
        site will link to <literal>index.html</literal> at the root,
        <emphasis>not</emphasis> <literal>index.html</literal> within that
        subdirectory as you might expect.

        This is done so that sites can be hosted from a subdirectory of the
        domain, as is the case on GitHub Pages, while still having a way to
        make links relative to the site root.
        It also means that the <literal>path</literal> option of pages is
        exactly how you link to them, which is handy.
      '';
      example = "https://example.com/";
      type =
        let pattern =
          "^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/$";
        in mkOptionType {
          name = "URL";
          description = "URL ending with /";
          check = x: str.check x && builtins.match pattern x != null;
          inherit (str) merge;
        };
    };

    siteTitle = mkOption {
      description = "A short name for your website.";
      example = "Example Site";
      type = str;
      defaultText = literalDocBook ''
        Generated by removing special characters from
        <literal>baseUrl</literal>.
      '';
      default = pipe config.baseUrl [
        (splitString "/")
        (drop 1) # Remove file: / http: / https:
        (filter (word: stringLength word > 0))
        (concatStringsSep " ")
      ];
    };

    language = mkOption {
      description = "Language the website is written in.";
      example = "en-us";
      type =
        let pattern = "[a-zA-Z]{2}(-[a-zA-Z]{2})?";
        in mkOptionType {
          name = "Language";
          description = "BCP 47 Language-Region code";
          check = x: str.check x && builtins.match pattern x != null;
          inherit (str) merge;
        };
    };

    package = mkOption {
      description = "Derivation containing the web root.";
      internal = true;
      type = package;
    };
  };
}
